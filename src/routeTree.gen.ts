/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PostsIndexImport } from './routes/posts/index'
import { Route as PostsAddImport } from './routes/posts/add'
import { Route as PostsPostIdImport } from './routes/posts/$postId'
import { Route as PostsPostIdEditImport } from './routes/posts/$postId.edit'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const PostsAddRoute = PostsAddImport.update({
  path: '/posts/add',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  path: '/posts/$postId',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdEditRoute = PostsPostIdEditImport.update({
  path: '/edit',
  getParentRoute: () => PostsPostIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof rootRoute
    }
    '/posts/add': {
      id: '/posts/add'
      path: '/posts/add'
      fullPath: '/posts/add'
      preLoaderRoute: typeof PostsAddImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId/edit': {
      id: '/posts/$postId/edit'
      path: '/edit'
      fullPath: '/posts/$postId/edit'
      preLoaderRoute: typeof PostsPostIdEditImport
      parentRoute: typeof PostsPostIdImport
    }
  }
}

// Create and export the route tree

interface PostsPostIdRouteChildren {
  PostsPostIdEditRoute: typeof PostsPostIdEditRoute
}

const PostsPostIdRouteChildren: PostsPostIdRouteChildren = {
  PostsPostIdEditRoute: PostsPostIdEditRoute,
}

const PostsPostIdRouteWithChildren = PostsPostIdRoute._addFileChildren(
  PostsPostIdRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/posts/$postId': typeof PostsPostIdRouteWithChildren
  '/posts/add': typeof PostsAddRoute
  '/posts': typeof PostsIndexRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/posts/$postId': typeof PostsPostIdRouteWithChildren
  '/posts/add': typeof PostsAddRoute
  '/posts': typeof PostsIndexRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutLazyRoute
  '/posts/$postId': typeof PostsPostIdRouteWithChildren
  '/posts/add': typeof PostsAddRoute
  '/posts/': typeof PostsIndexRoute
  '/posts/$postId/edit': typeof PostsPostIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/posts/$postId'
    | '/posts/add'
    | '/posts'
    | '/posts/$postId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/posts/$postId'
    | '/posts/add'
    | '/posts'
    | '/posts/$postId/edit'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/posts/$postId'
    | '/posts/add'
    | '/posts/'
    | '/posts/$postId/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutLazyRoute: typeof AboutLazyRoute
  PostsPostIdRoute: typeof PostsPostIdRouteWithChildren
  PostsAddRoute: typeof PostsAddRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutLazyRoute: AboutLazyRoute,
  PostsPostIdRoute: PostsPostIdRouteWithChildren,
  PostsAddRoute: PostsAddRoute,
  PostsIndexRoute: PostsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/posts/$postId",
        "/posts/add",
        "/posts/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts/$postId.tsx",
      "children": [
        "/posts/$postId/edit"
      ]
    },
    "/posts/add": {
      "filePath": "posts/add.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.tsx"
    },
    "/posts/$postId/edit": {
      "filePath": "posts/$postId.edit.tsx",
      "parent": "/posts/$postId"
    }
  }
}
ROUTE_MANIFEST_END */
